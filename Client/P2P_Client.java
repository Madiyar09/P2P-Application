package P2P_Client;


import java.io.*;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.Key;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author aibek
 */

class Info {
    public String Name;
    public String Type;
    public String Size;
    public String LastModified;
    public String Ip;
    public String Port;
    
    public Info() {
        
    }
    
    public Info(String name, String type, String size, 
            String lastmodified, String ip, String port) {
        Name = name;
        Type = type;
        Size = size;
        LastModified = lastmodified;
        Ip = ip;
        Port = port;
    }
    
    public String toString() {
        return "<" + Name + "?" + Type + "?" + Size + "?" + LastModified + "?" + Ip + "?" + Port + ">";
    }
}

public class P2P_Client extends javax.swing.JFrame {
    
    
    /**
     * Creates new form NewJFrame
     */
    //values for server and client
    public static String ServerIP = "localhost";
    public static int ServerPort = 6789;
    private static int MyPort = 5678;                
    
    private static Socket socket;
    //for client
    private static DataOutputStream outToServer;
    private static BufferedReader inFromServer;
    //for server
    private static BufferedReader input;
    private static DataOutputStream output;
    private static ServerSocket port;
    //path of shared files
    public static String path;
    //path of place where to download file
    public static String DownloadingPath;
    //list of information about files after search
    private static ArrayList <Info> infoList = new ArrayList<Info>();
    private static Socket  ss;
    
    //maximum allowed size of file = 50 MB
    private static int maxFileSize = 419430400;
    
    public P2P_Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        SearchField = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        Download = new javax.swing.JButton();
        Close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Search For:");

        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File name", "File type", "Last modified", "File size"
            }
        ));
        jScrollPane1.setViewportView(Table);

        Download.setText("Download");
        Download.setPreferredSize(new java.awt.Dimension(80, 25));
        Download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadActionPerformed(evt);
            }
        });

        Close.setText("Close");
        Close.setPreferredSize(new java.awt.Dimension(80, 25));
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Download, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Close, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Download, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Close, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        // TODO add your handling code here:
        String bye = "BYE";
        try {
            //send to server string bye to close connection
            outToServer.writeBytes(bye + '\n');
            //close ServerSocket
            port.close();
            //set JFrame invisible
            setVisible(false);
            dispose();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_CloseActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        String s = SearchField.getText();
        try {
            //send to server string, where string is the text that I entered into text field
            outToServer.writeBytes("SEARCH:" + s + "\n");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        String receive = "";
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        while(true){
            
            try {
                //receive from client list after serch
                receive = inFromServer.readLine();
                if (receive.equals("NOT FOUND")){
                    //if file not found, clear table
                    model.setRowCount(0);
                    infoList.clear();
                    break;
                } else if (receive.equals("FOUND:")) {
                    //clear table for entering data after search
                    model.setRowCount(0);       
                    infoList.clear();
                }else if (receive.equals("END SEARCH")){
                    break;
                } else {
                    //set width of 'Name' column
                    Table.getColumnModel().getColumn(0).setPreferredWidth(200);
                    //get name of file
                    String name = receive.substring(1, receive.indexOf('?'));
                    receive = receive.substring(receive.indexOf('?') + 1);
                    
                    //get format of file
                    String type = receive.substring(0, receive.indexOf('?'));
                    receive = receive.substring(receive.indexOf('?') + 1);
                    
                    //get size of file
                    String size = receive.substring(0, receive.indexOf('?'));
                    receive = receive.substring(receive.indexOf('?') + 1);
                    
                    //get last modified date of file
                    String date = receive.substring(0, receive.indexOf('?'));
                    receive = receive.substring(receive.indexOf('?') + 1);
                    
                    //ip of peer from which i can download one of the files
                    String FileIp = receive.substring(0, receive.indexOf('?'));
                    receive = receive.substring(receive.indexOf('?') + 1);
                    
                    //port of peer from which i can download one of the files
                    String FilePort = receive.substring(0, receive.indexOf('>'));
                    
                    //add into the list all the data 
                    infoList.add(new Info(name, type, size, date, FileIp, FilePort));
                    
                    //fill row with name, type, date and size of files
                    Object[] row = {name, type, date, size};
                    
                    //add row into the table 
                    model.addRow(row);
                }
                        
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void DownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadActionPerformed
        // TODO add your handling code here:
        //ip of the peer where i can download selected file
        String selectedIp = infoList.get(Table.getSelectedRow()).Ip;
        
        //port of the peer where i can download selected file
        String selectedPort = infoList.get(Table.getSelectedRow()).Port;
        
        //change string into integer
        int IntegerPort = Integer.parseInt(selectedPort);
        try{
            //connect to the peer
            Socket selectedSocket = new Socket(selectedIp, IntegerPort);
            DataOutputStream selectedOutput = new DataOutputStream(selectedSocket.getOutputStream());
            KeyGenerator key = KeyGenerator.getInstance("DES");
            SecretKey secret = key.generateKey();
            Cipher c;
            c = Cipher.getInstance("DES");
            
            //say to peer what i want to download
            selectedOutput.writeBytes("DOWNLOAD:" + infoList.get(Table.getSelectedRow()).Name + '\n');
            //download
            byte [] FileBytes  = new byte [maxFileSize];
            InputStream InputS = selectedSocket.getInputStream();
            //set path where file will be stored and its name
            String k = DownloadingPath + "\\" + infoList.get(Table.getSelectedRow()).Name;
            
            FileOutputStream FileO = new FileOutputStream(k);
            BufferedOutputStream BufferedO = new BufferedOutputStream(FileO);
            int bytes, total = 0;
            bytes = InputS.read(FileBytes, 0, FileBytes.length);
            total = bytes;
            //start downloading file by packets
            while(bytes > -1){
                bytes = InputS.read(FileBytes, total, (FileBytes.length - total));
                total += bytes;
            }
            
            //byte[] bytesDecrypted = new EncryptionFile().decrypt("Zhanar+Aibek", k);
            
            BufferedO.write(FileBytes, 0 , total);
            BufferedO.flush();
            
            
            
            }catch(Exception e){
                System.out.println(e.getMessage());
            }
        
    }//GEN-LAST:event_DownloadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
           DownloadingPath = args[1];
           path = args[0];
           //Create ServerSocket
           port = new ServerSocket(MyPort);
           //Run Server and Client
           Server();
           Client();
    }

    public static void Server(){
        (new Thread(){
            public void run(){
                while(true) {
                    
                    try{
                        //Start server
                        ss = port.accept();
                        //accept clients
                        NewClient(ss);
                    }catch(Exception e){
                        System.out.println(e.getMessage());
                        return;
                    }
                }
            }
        }).start();
    }
    
    public static void NewClient(Socket ss) {
        (new Thread(){
            public void run(){  
                try{
                    input = new BufferedReader(new InputStreamReader(ss.getInputStream()));
                    output = new DataOutputStream(ss.getOutputStream());
                    //get message from peer
                    String k = input.readLine();
                    if (k.substring(0, k.indexOf(':')).equals("DOWNLOAD")){
                        k = k.substring(k.indexOf(':') + 1);
                        //send
                        //find file that client/peer wants to download
                        String sendingFile = path + "\\" + k;
                        File selectedFile = new File (sendingFile);
                        //send file
                        byte [] byteOfFile  = new byte [(int)selectedFile.length()];
                        
                        FileInputStream FileI = new FileInputStream(selectedFile);
                        BufferedInputStream BufferedI = new BufferedInputStream(FileI);
                        BufferedI.read(byteOfFile, 0, byteOfFile.length);
                        output.write(byteOfFile);
                        output.flush();
                        //close connection with peer
                        ss.close();
                    }
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }

            }
        }).start();
    }
    
    public static void Client(){
        (new Thread() {
            public void run(){
                String hello = "HELLO";
                String hi = "HI";
                try{
                    String send;
                    String rec;
                    String temp;
                    
                    //my port
                    String port1 = "" + port;
                    String actual;
                    actual = port1.substring(port1.indexOf(',') + 1);
                    actual = actual.substring(actual.indexOf('=') + 1);
                    actual = actual.substring(0, actual.length() - 1);
                    //connect to main server
                    socket = new Socket(ServerIP, ServerPort);
                    outToServer = new DataOutputStream(socket.getOutputStream());
                    inFromServer = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    //send to server hello
                    outToServer.writeBytes(hello + '\n');
                    //receive from server hi
                    rec = inFromServer.readLine();
                    //if hi
                    if (rec.equals(hi)){
                        File folder = new File(path);
                        File[] list = folder.listFiles();
                        String s = "";
                        for (int i = 0; i < list.length; i++){
                            //send string s to main server where is the information about all files in the shared path
                            if (list[i].isFile()){
                                s += "<";
                                //add name, type of file
                                s += list[i].getName() + "?" + list[i].getName().substring(list[i].getName().lastIndexOf('.') + 1) + "?";
                                double mb = list[i].length();
                                double c = Math.pow(1024, 2);
                                mb /= c;
                                s += Math.round(mb*100.0)/100.0 + " MB?";
                                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                                String formated = sdf.format(list[i].lastModified());
                                s += formated + "?";
                                InetAddress cc = InetAddress.getLocalHost();
                                String ipv4 = "" + cc;
                                s += ipv4.substring(ipv4.lastIndexOf('/') + 1) + "?" + actual;
                                s += ">";
                            }
                            /*each line of a string is in the format <name?type?size?date in the form 
                            day/month/year?myip?myport>*/
                            //reason for '?' between each information is that files cannot be names using ?
                            //as a result, easier to read each part of line on the server side
                            s += "\n";
                        }
                        //send string to server
                        outToServer.writeBytes(s);
                    /* Set the Nimbus look and feel */
                    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
                     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                     */
                    try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                            if ("Nimbus".equals(info.getName())) {
                                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                break;
                            }
                        }
                    } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(P2P_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(P2P_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(P2P_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(P2P_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }
                    //</editor-fold>
                    //</editor-fold>

                    /* Create and display the form */
                        java.awt.EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                //JFrame
                                new P2P_Client().setVisible(true);
                            }
                        });
                    }
                }catch(Exception e){
                    System.out.println(e.getMessage());
                }
            }
        }).start();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close;
    private javax.swing.JButton Download;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchField;
    private javax.swing.JTable Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
